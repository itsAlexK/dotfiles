#!/bin/zsh

export FZF_COMPLETION_TRIGGER='--'
export FZF_DEFAULT_OPTS='--reverse --height 60%  --border'

# uses rg to search by default
export FZF_DEFAULT_COMMAND='rg --files --no-ignore --hidden --follow -g "!{.git,node_modules,.venv}/*" 2> /dev/null'


# search history
hf() {
  print -z $( ([ -n "$ZSH_NAME" ] && fc -l 1 || history) | fzf +s -i --exact --tac | sed -E 's/ *[0-9]*\*? *//' | sed -E 's/\\/\\\\/g')
}


# helper function for fzf/bat
fzf_bat_exec() {
    local file=$1
    local line=$2
    local lines=$LINES

    # subtract 3 for the header
    declare -i center=$(( (lines - 3) / 2 ))

    if [ $line -lt $center ]; then
        center=$line
    fi
    start=$(( line - center ))
    end=$(( lines + start ))

    bat --color always --highlight-line $line --line-range $start:$end --paging never "$file"
}


# find-in-file - usage: fif <searchTerm>
fif() {
  INITIAL_QUERY=""
  RG_PREFIX="rg --column --line-number --color=always --smart-case "
  FZF_DEFAULT_COMMAND="$RG_PREFIX '$INITIAL_QUERY'" \
    fzf --bind "change:reload:$RG_PREFIX {q} || true" \
        --bind "enter:execute:(bat --color=always --highlight-line={2} {1} | less +{2})" \
        --delimiter=: \
        --with-nth=1,4 \
        --ansi --disabled --query "$INITIAL_QUERY" \
        --height=100% --layout=reverse \
        --preview 'source ~/dotfiles/.zsh/fzf && fzf_bat_exec {1} {2}'
}

# git

_fzf_complete_git_notrigger() {
    FZF_COMPLETION_TRIGGER='' _fzf_complete_git
}

_fzf_complete_git() {
    ARGS="$@"
    if [[ $ARGS == 'git checkout'* ]]; then
        _fzf_complete "--reverse" "$@" < <(
            git branch -vv --al
        )
    elif [[ $ARGS == 'git commit'* ]]; then
        _fzf_complete "--reverse --multi" "$@" < <(
            git status --porcelain=1
        )
    else
        eval "zle ${fzf_default_completion:-expand-or-complete}"
    fi
}

_fzf_complete_git_post() {
    awk '{print $2}'

}

# git log show with fzf
gli() {

  # param validation
  if [[ ! `git log -n 1 $@ | head -n 1` ]] ;then
    return
  fi

  # filter by file string
  local filter
  # param existed, git log for file if existed
  if [ -n $@ ] && [ -f $@ ]; then
    filter="-- $@"
  fi

  # git command
  local gitlog=(
    git log
    --graph --color=always
    --abbrev-commit
    --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset'
  )

  # fzf command
  local fzf=(
    fzf
    --ansi --no-sort --reverse --tiebreak=index
    --preview "f() { set -- \$(echo -- \$@ | grep -o '[a-f0-9]\{7\}'); [ \$# -eq 0 ] || git show --color=always \$1 $filter; }; f {}"
    --bind "ctrl-q:abort,ctrl-m:execute:
                (grep -o '[a-f0-9]\{7\}' | head -1 |
                xargs -I % sh -c 'git show --color=always % $filter | less -R') << 'FZF-EOF'
                {}
                FZF-EOF"
   --height=90%
  )

  # piping them
  $gitlog | $fzf
}
